@using System.Configuration;

@model RM.MailshotsOnline.Entities.PageModels.Register

<script src='https://www.google.com/recaptcha/api.js'></script>

@using (Html.BeginUmbracoForm("RegisterForm", "RegisterSurface", null, new Dictionary<string, object> { { "class" , "register__form" } })) {

        <section class="content-box register-stage" data-bind="css: setCurrentStage(0)">

            <h2 class="heading01 heading01--line-on-sides"><span class="text">First we need a few details</span></h2>

            <div class="form-row">
                <div class="required-field">@Html.DisplayFor(m => m.RequiredFieldsLabel)</div>
            </div>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="form-row validation-messages">
                    @Html.ValidationMessage("ViewModel.Email", new Dictionary<string, object> {{"validation-field-id", "ViewModel_Email"}})
                    @Html.ValidationMessage("ViewModel.ConfirmEmail", new Dictionary<string, object> {{"validation-field-id", "ViewModel_ConfirmEmail"}})
                    @Html.ValidationMessage("ViewModel.FirstName", new Dictionary<string, object> {{"validation-field-id", "ViewModel_FirstName"}})
                    @Html.ValidationMessage("ViewModel.LastName", new Dictionary<string, object> {{"validation-field-id", "ViewModel_LastName"}})
                    @Html.ValidationMessage("ViewModel.Title", new Dictionary<string, object> {{"validation-field-id", "ViewModel_Title"}})
                    @Html.ValidationMessage("ViewModel.Password", new Dictionary<string, object> {{"validation-field-id", "ViewModel_Password"}})
                    @Html.ValidationMessage("ViewModel.ConfirmPassword", new Dictionary<string, object> {{"validation-field-id", "ViewModel_ConfirmPassword"}})
                    @Html.ValidationMessage("ViewModel.AgreeToTermsAndConditions", new Dictionary<string, object> {{"validation-field-id", "ViewModel_AgreeToTermsAndConditions"}})
                </div>
            }

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.Title, Model.TitleLabel)
                <div class="input-wrapper">
                    @Html.DropDownListFor(m => m.ViewModel.Title, new SelectList(Model.TitleOptions, "Key", "Value", Model.ViewModel.Title), new 
                    { data_bind = "value: stage1.Title, select2: { placeholder: 'Select a State' }" })
                </div>
            </div>


            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.FirstName, Model.FirstNameLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.FirstName, new { data_bind = "value: stage1.FirstName, initializeValue: stage1.FirstName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.LastName, Model.LastNameLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.LastName, new { data_bind = "value: stage1.LastName, initializeValue: stage1.LastName" })
                </div>
            </div>


            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.Email, Model.EmailLabel)
                <div class="input-wrapper" >
                    @Html.TextBoxFor(m => m.ViewModel.Email, new { data_bind = "value: stage1.Email, initializeValue: stage1.Email" })
                </div>
            </div>


            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.ConfirmEmail, Model.ConfirmEmailLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.ConfirmEmail, new { data_bind = "value: stage1.ConfirmEmail, initializeValue: stage1.ConfirmEmail" })
                </div>
            </div>


            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.Password, Model.PasswordLabel)
                <div class="input-wrapper">
                    @Html.PasswordFor(m => m.ViewModel.Password, new { data_bind = "value: stage1.Password, initializeValue: stage1.Password" })
                </div>
            </div>


            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.ConfirmPassword, Model.ConfirmPasswordLabel)
                <div class="input-wrapper">
                    @Html.PasswordFor(m => m.ViewModel.ConfirmPassword, new { data_bind = "value: stage1.ConfirmPassword, initializeValue: stage1.ConfirmPassword" })
                </div>
            </div>


            <hr>

            <h3 class="heading01">@Model.KeepYouInformedTitle</h3>

            @Html.Raw(Model.KeepYouInformedSectionCopy)

            <div class="form-row form-row--align-left">
                <div>
                    @Html.CheckBoxFor(m => m.ViewModel.AgreeToRoyalMailContact, new { data_bind = "value: stage1.royalMailMailAgreement, initializeValue: stage1.AgreeToRoyalMailContact" })
                </div>
                <label for="ViewModel_AgreeToRoyalMailContact">@Model.RoyalMailContactOptionsDisclaimer</label>
            </div>
            <div class="form-row form-row--align-left">
                <div>
                    @Html.CheckBoxFor(m => m.ViewModel.AgreeToThirdPartyContact, new { data_bind = "value: stage1.thirdPartyMailAgreement, initializeValue: stage1.AgreeToThirdPartyContact" })
                </div>
                <label for="ViewModel_AgreeToThirdPartyContact">@Model.ThirdPartyContactOptionsDisclaimer</label>
            </div>

            <hr>

            <div class="form-row form-row--align-right">

                <label for="ViewModel_AgreeToTermsAndConditions">
                    @Html.Raw(Model.TermsAndConditionsLabelWithLink)
                </label>

                @Html.CheckBoxFor(m => m.ViewModel.AgreeToTermsAndConditions, new { data_bind = "checked: stage1.AgreeToTermsAndConditions, initializeValue: stage1.AgreeToTermsAndConditions" })
            </div>

            <div class="form-row form-row--align-right form-row--last">
                <a href="" class="btn btn--blue btn--next" data-bind="click: $root.proceedToStage2" title="">@Model.NextButtonText</a>
            </div>

            <div class="stage-marker">
                Step 1 / 3
            </div>

        </section>

        <section class="content-box register-stage" data-bind="css: setCurrentStage(1)">
            <h2 class="heading01 heading01--line-on-sides">
                <span class="text">About your organisation</span>
            </h2>

            <div class="form-row">
                <div class="required-field"><span class="required-field__star">*</span> Indicates a required field</div>
            </div>

            <div class="form-row">
                <label for="addressNowSearch">Address Search:</label>
                <div class="input-wrapper">
                    <input class="text-box single-line" id="addressNowSearch" type="text" value="">
                </div>
            </div>

            <div class="form-row form-row--align-right">
                <a href="" class="btn btn--blue btn--next" data-bind="click: $root.proceedToStage3" title="">Find Address</a>
            </div>

            <div class="form-row form-row--align-right form-row--last">
                <a href="" title="" data-bind="click: $root.proceedToStage3">Enter address manually</a>
            </div>

            <div class="stage-marker">
                <a title="Go back a step" data-bind="click: proceedToStage1">Back</a> Step 2 / 3
            </div>

        </section>

        <section class="content-box register-stage" data-bind="css: setCurrentStage(2)">

            <h2 class="heading01 heading01--line-on-sides">
                <span class="text">About your organisation</span>
            </h2>

            <div class="form-row">
                <div class="required-field">@Html.DisplayFor(m => m.RequiredFieldsLabel)</div>
            </div>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="form-row validation-messages">
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.OrganisationName", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_OrganisationName"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.JobTitle", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_JobTitle"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.FlatNumber", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_FlatNumber"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.BuildingNumber", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_BuildingNumber"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.BuildingName", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_BuildingName"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.Address1", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_Address1"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.Address2", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_Address2"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.City", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_City"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.Postcode", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_Postcode"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.Country", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_Country"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.WorkPhoneNumber", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_WorkPhoneNumber"}})
                    @Html.ValidationMessage("ViewModel.OrganisationDetailsViewModel.Country", new Dictionary<string, object> {{"validation-field-id", "ViewModel_OrganisationDetailsViewModel_MobilePhoneNumber"}})
                    @Html.ValidationMessage("ViewModel.IsRecaptchaValidated", new Dictionary<string, object> {{"validation-field-id", "ViewModel_IsRecaptchaValidated"}})
                </div>
            }

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.OrganisationName, Model.OrganisationNameLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.OrganisationName, new { data_bind = "value: stage3.OrganisationName, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.JobTitle, Model.JobTitleLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.JobTitle, new { data_bind = "value: stage3.JobTitle, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.FlatNumber, Model.FlatNumberLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.FlatNumber, new { data_bind = "value: stage3.FlatNumber, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.BuildingNumber, Model.BuildingNumberLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.BuildingNumber, new { data_bind = "value: stage3.BuildingNumber, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.BuildingName, Model.BuildingNameLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.BuildingName, new { data_bind = "value: stage3.BuildingName, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.Address1, Model.Address1Label)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.Address1, new { data_bind = "value: stage3.Address1, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.Address2, Model.Address2Label)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.Address2, new { data_bind = "value: stage3.Address2, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.City, Model.CityLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.City, new { data_bind = "value: stage3.City, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.Postcode, Model.PostcodeLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.Postcode, new { data_bind = "value: stage2.Postcode, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.Country, Model.CountryLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.Country, new { data_bind = "value: stage3.Country, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.WorkPhoneNumber, Model.WorkPhoneNumberLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.WorkPhoneNumber, new { data_bind = "value: stage3.WorkPhoneNumber, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.LabelFor(m => m.ViewModel.OrganisationDetailsViewModel.MobilePhoneNumber, Model.MobilePhoneNumberLabel)
                <div class="input-wrapper">
                    @Html.TextBoxFor(m => m.ViewModel.OrganisationDetailsViewModel.MobilePhoneNumber, new { data_bind = "value: stage3.MobilePhoneNumber, initializeValue: stage3.OrganisationName" })
                </div>
            </div>

            <div class="form-row">
                @Html.HiddenFor(m => m.ViewModel.IsRecaptchaValidated)
                <div class="input-wrapper g-recaptcha" data-sitekey="@ConfigurationManager.AppSettings["RecaptchaSiteKey"]"></div>
            </div>
 
            <div class="form-row form-row--align-right form-row--last">
                <input type="submit" value="@Model.RegisterCtaText" class="btn btn--green" data-bind="click: submit" />
            </div>

            <div class="stage-marker">
                <a title="Go back a step" data-bind="click: proceedToStage2 ">Back</a> Step 3 / 3
            </div>

        </section>

}

